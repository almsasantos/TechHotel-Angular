{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/error/error.component.ts","webpack:///src/app/error/error.component.html","webpack:///src/app/home-view/home-view.component.ts","webpack:///src/app/home-view/home-view.component.html","webpack:///src/app/invoice-list/invoice-list.component.ts","webpack:///src/app/invoice-list/invoice-list.component.html","webpack:///src/app/invoices-view/invoices-view.component.ts","webpack:///src/app/invoices-view/invoices-view.component.html","webpack:///src/app/landing-page/landing-page.component.ts","webpack:///src/app/landing-page/landing-page.component.html","webpack:///src/app/login-view/login-view.component.ts","webpack:///src/app/login-view/login-view.component.html","webpack:///src/app/map-view/map-view.component.ts","webpack:///src/app/map-view/map-view.component.html","webpack:///src/app/massage-appointment/massage-appointment.component.ts","webpack:///src/app/massage-appointment/massage-appointment.component.html","webpack:///src/app/massage-list/massage-list.component.ts","webpack:///src/app/massage-list/massage-list.component.html","webpack:///src/app/massages-view/massages-view.component.ts","webpack:///src/app/massages-view/massages-view.component.html","webpack:///src/app/models/shared.service.ts","webpack:///src/app/navbar/navbar.component.ts","webpack:///src/app/navbar/navbar.component.html","webpack:///src/app/pool-rent-appointment/pool-rent-appointment.component.ts","webpack:///src/app/pool-rent-appointment/pool-rent-appointment.component.html","webpack:///src/app/pool-rent-list/pool-rent-list.component.ts","webpack:///src/app/pool-rent-list/pool-rent-list.component.html","webpack:///src/app/pool-rent-view/pool-rent-view.component.ts","webpack:///src/app/pool-rent-view/pool-rent-view.component.html","webpack:///src/app/profile-list/profile-list.component.ts","webpack:///src/app/profile-list/profile-list.component.html","webpack:///src/app/profile-view/profile-view.component.ts","webpack:///src/app/profile-view/profile-view.component.html","webpack:///src/app/registration-view-new/registration-view-new.component.ts","webpack:///src/app/registration-view-new/registration-view-new.component.html","webpack:///src/app/reservation-view-new/reservation-view-new.component.ts","webpack:///src/app/reservation-view-new/reservation-view-new.component.html","webpack:///src/app/room-food-appointment/room-food-appointment.component.ts","webpack:///src/app/room-food-appointment/room-food-appointment.component.html","webpack:///src/app/room-food-list/room-food-list.component.ts","webpack:///src/app/room-food-list/room-food-list.component.html","webpack:///src/app/room-food-view/room-food-view.component.ts","webpack:///src/app/room-food-view/room-food-view.component.html","webpack:///src/app/rooms-list/rooms-list.component.ts","webpack:///src/app/rooms-list/rooms-list.component.html","webpack:///src/app/rooms-view/rooms-view.component.ts","webpack:///src/app/rooms-view/rooms-view.component.html","webpack:///src/app/users-invoices-list/users-invoices-list.component.ts","webpack:///src/app/users-invoices-list/users-invoices-list.component.html","webpack:///src/app/users-invoices-view/users-invoices-view.component.ts","webpack:///src/app/users-invoices-view/users-invoices-view.component.html","webpack:///src/app/users-list/users-list.component.ts","webpack:///src/app/users-list/users-list.component.html","webpack:///src/app/users-view/users-view.component.ts","webpack:///src/app/users-view/users-view.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","ErrorComponent","HomeViewComponent","http","formBuilder","cookieService","router","route","httpOptions","headers","Authorization","get","subscribe","resp","navigate","relativeTo","InvoiceListComponent","invoiceList","displayedColumns","InvoicesViewComponent","users","isAdmin","bool","invoice","console","log","LandingPageComponent","LoginViewComponent","sharedService","message","approvalText","httpOptionsCookie","submitForm","auth","btoa","loginForm","controls","username","value","password","set","setErrors","incorrect","updateApprovalMessage","goHome","group","required","currentApprovalStageMessage","msg","MapViewComponent","_location","latitude","longitude","markerSource","ol","source","Vector","markerStyle","style","Style","image","Icon","anchor","anchorXUnits","anchorYUnits","opacity","src","map","Map","target","layers","layer","Tile","OSM","view","View","center","proj","fromLonLat","zoom","addMarker","getView","setCenter","setZoom","lat","lng","vectorLayer","features","Feature","geometry","geom","Point","transform","addLayer","back","goBack","MassageAppointmentComponent","successMessage","massageEmiter","todoForm","massageType","valueChanges","basicId","basicRoomIdNum","post","massage","emit","Object","forEach","key","MassageListComponent","massageList","MassagesViewComponent","roomId","basicRoomId","parseInt","JSON","stringify","reset","SharedService","approvalStageMessage","asObservable","next","providedIn","NavbarComponent","logout","content","document","getElementsByClassName","navbar","navWidth","offsetWidth","i","length","marginLeft","window","addEventListener","PoolRentAppointmentComponent","poolRentEmiter","floatiesNum","min","towelNum","PoolRentListComponent","poolRentsList","PoolRentViewComponent","poolRent","ProfileListComponent","sanitizer","profileList","safeHtml","bypassSecurityTrustHtml","ProfileViewComponent","user","newUser","basicUser","RegistrationViewNewComponent","noPremium","name","pattern","minLength","phoneNumber","email","birthDate","country","city","street","postalCode","balance","type","ReservationViewNewComponent","isTypeRoom","regularRoom","suiteRoom","numberOfNights","roomType","newType","reservation","roomIdPost","RoomFoodAppointmentComponent","roomFoodEmiter","foodMenu","drinkMenu","roomFood","RoomFoodListComponent","roomFoodsList","RoomFoodViewComponent","RoomsListComponent","roomEmiter","regularRoomList","suiteRoomList","RoomsViewComponent","UsersInvoicesListComponent","UsersInvoicesViewComponent","invoiceByUser","UsersListComponent","userEmiter","basicUserList","premiumUserList","premiumUser","UsersViewComponent","updateList","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LandingPageComponent } from './landing-page/landing-page.component';\nimport { HomeViewComponent } from './home-view/home-view.component';\nimport { LoginViewComponent } from './login-view/login-view.component';\nimport { RegistrationViewNewComponent } from './registration-view-new/registration-view-new.component';\nimport { ReservationViewNewComponent } from './reservation-view-new/reservation-view-new.component';\nimport { MassagesViewComponent } from './massages-view/massages-view.component';\nimport { PoolRentViewComponent } from './pool-rent-view/pool-rent-view.component';\nimport { RoomFoodViewComponent } from './room-food-view/room-food-view.component';\nimport { InvoicesViewComponent } from './invoices-view/invoices-view.component';\nimport { ProfileViewComponent } from './profile-view/profile-view.component';\nimport { MapViewComponent } from './map-view/map-view.component';\nimport { UsersViewComponent } from './users-view/users-view.component';\nimport { RoomsViewComponent } from './rooms-view/rooms-view.component';\nimport { UsersInvoicesViewComponent } from './users-invoices-view/users-invoices-view.component';\nimport { ErrorComponent } from './error/error.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LandingPageComponent\n  },\n  {\n    path: 'home',\n    component: HomeViewComponent\n  },\n  {\n    path: 'login',\n    component: LoginViewComponent\n  },\n  {\n    path: 'registrations',\n    component: RegistrationViewNewComponent\n  },\n  {\n    path: 'reservations',\n    component: ReservationViewNewComponent\n  },\n  {\n    path: 'massages',\n    component: MassagesViewComponent\n  },\n  {\n    path: 'pool-rents',\n    component: PoolRentViewComponent\n  },\n  {\n    path: 'room-foods',\n    component: RoomFoodViewComponent\n  },\n  {\n    path: 'invoices',\n    component: InvoicesViewComponent\n  },\n  {\n    path: 'profile',\n    component: ProfileViewComponent\n  },\n  {\n    path: 'location',\n    component: MapViewComponent\n  },\n  {\n    path: 'users',\n    component: UsersViewComponent\n  },\n  {\n    path: 'rooms',\n    component: RoomsViewComponent\n  },\n  {\n    path: 'user-invoices',\n    component: UsersInvoicesViewComponent\n  },\n  {\n    path: '**',\n    component: ErrorComponent,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'tech-hotel';\n}\n","<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie-service';\nimport { FormsModule } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatTableModule } from '@angular/material/table';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatListModule} from '@angular/material/list'; \nimport {MatToolbarModule} from '@angular/material/toolbar'; \n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LandingPageComponent } from './landing-page/landing-page.component';\nimport { LoginViewComponent } from './login-view/login-view.component';\nimport { MassagesViewComponent } from './massages-view/massages-view.component';\nimport { PoolRentViewComponent } from './pool-rent-view/pool-rent-view.component';\nimport { RoomFoodViewComponent } from './room-food-view/room-food-view.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { InvoicesViewComponent } from './invoices-view/invoices-view.component';\nimport { HomeViewComponent } from './home-view/home-view.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport { RegistrationViewNewComponent } from './registration-view-new/registration-view-new.component'; \nimport { ReservationViewNewComponent } from './reservation-view-new/reservation-view-new.component';\nimport { MassageListComponent } from './massage-list/massage-list.component';\nimport { MassageAppointmentComponent } from './massage-appointment/massage-appointment.component';\nimport { PoolRentAppointmentComponent } from './pool-rent-appointment/pool-rent-appointment.component';\nimport { PoolRentListComponent } from './pool-rent-list/pool-rent-list.component';\nimport { RoomFoodListComponent } from './room-food-list/room-food-list.component';\nimport { RoomFoodAppointmentComponent } from './room-food-appointment/room-food-appointment.component';\nimport { ProfileViewComponent } from './profile-view/profile-view.component';\nimport { ErrorComponent } from './error/error.component';\nimport { MapViewComponent } from './map-view/map-view.component';\nimport { InvoiceListComponent } from './invoice-list/invoice-list.component';\nimport { ProfileListComponent } from './profile-list/profile-list.component';\nimport { UsersViewComponent } from './users-view/users-view.component';\nimport { UsersListComponent } from './users-list/users-list.component';\nimport { RoomsViewComponent } from './rooms-view/rooms-view.component';\nimport { RoomsListComponent } from './rooms-list/rooms-list.component';\nimport { UsersInvoicesViewComponent } from './users-invoices-view/users-invoices-view.component';\nimport { UsersInvoicesListComponent } from './users-invoices-list/users-invoices-list.component'; \n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LandingPageComponent,\n    LoginViewComponent,\n    MassagesViewComponent,\n    PoolRentViewComponent,\n    RoomFoodViewComponent,\n    NavbarComponent,\n    InvoicesViewComponent,\n    HomeViewComponent,\n    RegistrationViewNewComponent,\n    ReservationViewNewComponent,\n    MassageListComponent,\n    MassageAppointmentComponent,\n    PoolRentAppointmentComponent,\n    PoolRentListComponent,\n    RoomFoodListComponent,\n    RoomFoodAppointmentComponent,\n    ProfileViewComponent,\n    ErrorComponent,\n    MapViewComponent,\n    InvoiceListComponent,\n    ProfileListComponent,\n    UsersViewComponent,\n    UsersListComponent,\n    RoomsViewComponent,\n    RoomsListComponent,\n    UsersInvoicesViewComponent,\n    UsersInvoicesListComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    BrowserAnimationsModule,\n    MatFormFieldModule,\n    MatStepperModule,\n    FormsModule,\n    MatSelectModule,\n    HttpClientModule,\n    MatInputModule,\n    MatTableModule,\n    MatButtonModule,\n    MatCardModule,\n    MatGridListModule,\n    MatListModule,\n    MatToolbarModule\n  ],\n  providers: [ CookieService ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-error',\n  templateUrl: './error.component.html',\n  styleUrls: ['./error.component.css']\n})\nexport class ErrorComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<a class=\"error-page\" href=\"/home\">&nbsp;</a>","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-home-view',\n  templateUrl: './home-view.component.html',\n  styleUrls: ['./home-view.component.css']\n})\nexport class HomeViewComponent implements OnInit {\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n  constructor(\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private cookieService: CookieService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    this.http\n    .get<boolean>(\n      'https://techhotel-edge.herokuapp.com/users/login',\n      this.httpOptions\n    )\n    .subscribe((resp) => {\n      if (!resp) {\n        this.router.navigate(['/login'], { relativeTo: this.route });\n      }\n    });\n  }\n\n}\n","<app-navbar></app-navbar>\n<div class=\"home content\">\n  <div class=\"center\">\n    <h1 class=\"center-h1\">HOME</h1>\n  </div>\n\n  <div class=\"description\">\n    <mat-card\n      style=\"\n        margin: 0 -10rem;\n        text-align: center;\n        padding-top: 30px;\n        padding-bottom: 30px;\n        font-size: 20px;\n        font-family: description;\n      \"\n    >\n    Welcome to the home page of <b>TECH HOTEL</b> feel free to explore, make some reservations and to contact us any time.\n    </mat-card>\n  </div>\n\n  <mat-grid-list cols=\"2\" rowHeight=\"2:1\">\n  <mat-grid-tile>\n    <img src=\"../../assets/room.jpg\">\n  </mat-grid-tile>\n  <mat-grid-tile>\n    <img src=\"../../assets/roomservice.jpg\">\n  </mat-grid-tile>\n  <mat-grid-tile>\n    <img src=\"../../assets/pool.jpg\">\n  </mat-grid-tile>\n  <mat-grid-tile>\n    <img src=\"../../assets/massage.jpg\">\n  </mat-grid-tile>\n</mat-grid-list>\n\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Invoice } from '../models/invoice.model';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-invoice-list',\n  templateUrl: './invoice-list.component.html',\n  styleUrls: ['./invoice-list.component.css']\n})\nexport class InvoiceListComponent implements OnInit {\n  @Input()\n  invoiceList: Invoice[] = [];\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth')\n    }),\n  };\n\n  displayedColumns: string[] = [\n    'invoiceId',\n    'userId',\n    'name',\n    'roomId',\n    'invoiceType',\n    'priceOwed',\n  ];\n  constructor(\n    private cookieService: CookieService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<table\n  *ngIf=\"invoiceList.length >= 1\"\n  mat-table\n  [dataSource]=\"invoiceList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n  <ng-container matColumnDef=\"invoiceId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> INVOICE ID.</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.invoiceId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"userId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.userId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER NAME</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.name }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.roomId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"invoiceType\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>INVOICE TYPE</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.invoiceType }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"priceOwed\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>AMOUNT PAYED ($)</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.priceOwed }}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n\n<table\n  *ngIf=\"invoiceList.length == 0\"\n  mat-table\n  [dataSource]=\"invoiceList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n<ng-container matColumnDef=\"invoiceId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> INVOICE ID.</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.invoiceId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"userId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.userId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER NAME</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.name }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.roomId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"invoiceType\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>INVOICE TYPE ($)</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.invoiceType }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"priceOwed\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>AMOUNT PAYED</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.priceOwed }}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Invoice } from '../models/invoice.model';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { User } from '../models/user.model';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-invoices-view',\n  templateUrl: './invoices-view.component.html',\n  styleUrls: ['./invoices-view.component.css']\n})\nexport class InvoicesViewComponent implements OnInit {\n  users: User[] = [];\n\n  todoForm: FormGroup;\n  invoiceList: Invoice[] = [];\n  isAdmin = false;\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n  constructor(\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private cookieService: CookieService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    this.http\n    .get<boolean>(\n      'https://techhotel-edge.herokuapp.com/users/login',\n      this.httpOptions\n    )\n    .subscribe((resp) => {\n      if (!resp) {\n        this.router.navigate(['/login'], { relativeTo: this.route });\n      }\n    });\n\n    this.http.get<boolean>('https://techhotel-edge.herokuapp.com/users/is-admin',\n    this.httpOptions).subscribe((bool) => {\n      if (!bool) {\n        this.router.navigate(['/home'], { relativeTo: this.route });\n      }\n    });\n\n    this.http\n        .get<Invoice[]>(\n          'https://techhotel-edge.herokuapp.com/invoices',\n          this.httpOptions\n        )\n        .subscribe((invoice) => {\n          this.invoiceList = invoice; console.log(invoice);\n        });\n  }\n}\n","<app-navbar></app-navbar>\n<div class=\"invoices content\">\n  <div class=\"center\">\n    <h1 class=\"center-h1\">Invoices</h1>\n  </div>\n\n  <div class=\"description\">\n    <mat-card\n      style=\"\n        margin: 0 -10rem;\n        text-align: center;\n        padding-top: 30px;\n        padding-bottom: 30px;\n        font-size: 20px;\n        font-family: description;\">\n    All emitted <b>invoices</b> from Tech Hotel are displayed down bellow.\n    </mat-card>\n  </div>\n  \n  <div class=\"child-table\">\n  <app-invoice-list [invoiceList]=\"invoiceList\"></app-invoice-list>\n  </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-landing-page',\n  templateUrl: './landing-page.component.html',\n  styleUrls: ['./landing-page.component.css']\n})\nexport class LandingPageComponent implements OnInit {\n\n  constructor(\n    private cookieService: CookieService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    if (this.cookieService.get('auth')) {\n      this.router.navigate(['/home'], { relativeTo: this.route });\n    }\n  }\n\n}\n","<div class=\"Landing-page\">\n    <div class=\"header\">\n      <div class=\"title\">\n        <img src=\"../../assets/loguito.png\" width=\"100\"/>\n        <h1>TECH HOTEL</h1>\n      </div>\n      <div class=\"buttons\">\n        <button class=\"login btn\" routerLink=\"/location\">LOCATION</button>\n        <button class=\"login btn\" routerLink=\"/registrations\">REGISTER</button>\n        <button class=\"login btn\" routerLink=\"/login\">LOGIN</button>\n      </div>\n    </div>","import { Component, OnInit, Output, EventEmitter} from '@angular/core';\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { SharedService } from '../models/shared.service';\n\n@Component({\n  selector: 'app-login-view',\n  templateUrl: './login-view.component.html',\n  styleUrls: ['./login-view.component.css']\n})\n\nexport class LoginViewComponent implements OnInit {\n  loginForm: FormGroup;\n  message:string=\"\";\n  approvalText:string=\"\";\n\n\n  httpOptionsCookie = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth')\n    }),\n  };\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private http: HttpClient,\n    private cookieService: CookieService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private sharedService: SharedService\n  ) { }\n\n  ngOnInit(): void {\n    this.http\n      .get<boolean>(\n        'https://techhotel-edge.herokuapp.com/users/login',\n        this.httpOptionsCookie\n      )\n      .subscribe((resp) => {\n        if (resp) {\n          this.router.navigate(['/home'], { relativeTo: this.route });\n        }\n      });\n\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required],\n    });\n\n    this.sharedService.currentApprovalStageMessage.subscribe(msg => this.message = msg);\n  }\n\n  submitForm = () => {\n    const auth: string =\n      'Basic ' +\n      btoa(\n        this.loginForm.controls.username.value +\n          ':' +\n          this.loginForm.controls.password.value\n      );\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        Authorization: auth,\n      }),\n    };\n\n    const username: string = this.loginForm.controls.username.value;\n\n    this.http\n      .get<boolean>(\n        'https://techhotel-edge.herokuapp.com/users/login',\n        httpOptions\n      )\n      .subscribe((resp) => {\n        if (resp) {\n          this.cookieService.set('auth', auth);\n          this.cookieService.set('username', username);\n\n          this.router.navigate(['/home'], { relativeTo: this.route }); }\n      else {\n          this.loginForm.controls.username.setErrors({ incorrect: true });\n          this.loginForm.controls.password.setErrors({ incorrect: true });\n        }\n      });\n\n    this.sharedService.updateApprovalMessage(this.loginForm.get('username').value);\n  }\n\n  goHome = () => this.router.navigate(['/'], { relativeTo: this.route });\n\n}\n","<div class=\"Login\">\n    <div class=\"home\" (click)=\"goHome()\">\n      <div class=\"arrow\"></div>\n      <div class=\"text-home\">BACK</div>\n    </div>\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"submitForm()\">\n      <mat-form-field>\n        <mat-label>Username</mat-label>\n        <input matInput formControlName=\"username\" placeholder=\"Username\" />\n        <mat-error>\n          Please enter a valid username\n        </mat-error>\n      </mat-form-field>\n      <mat-form-field>\n        <mat-label>Password</mat-label>\n        <input matInput formControlName=\"password\" type=\"password\" placeholder=\"Password\"/>\n        <mat-error>\n          Please enter a valid password\n        </mat-error>\n      </mat-form-field>\n      <button class=\"button\" type=\"submit\" [disabled]=\"loginForm.invalid\">Log in</button>\n    </form>\n  </div>","import { Component, OnInit } from '@angular/core';\nimport { Location } from '@angular/common';\n\ndeclare var ol: any;\n\n@Component({\n  selector: 'app-map-view',\n  templateUrl: './map-view.component.html',\n  styleUrls: ['./map-view.component.css']\n})\nexport class MapViewComponent implements OnInit {  \n\n  latitude: number = 40.4197278;\n  longitude: number = -3.7043952;\n\n  markerSource = new ol.source.Vector();\n\n  markerStyle = new ol.style.Style({\n  image: new ol.style.Icon(/** @type {olx.style.IconOptions} */ ({\n    anchor: [0.5, 46],\n    anchorXUnits: 'fraction',\n    anchorYUnits: 'pixels',\n    opacity: 0.75,\n    src: 'https://openlayers.org/en/v4.6.4/examples/data/icon.png'\n  }))\n});\n\n  map: any;\n  constructor(private _location: Location) { }\n\n  ngOnInit() {\n    this.map = new ol.Map({\n      target: 'map',\n      layers: [\n        new ol.layer.Tile({\n          source: new ol.source.OSM()\n        })\n      ],\n      view: new ol.View({\n        center: ol.proj.fromLonLat([this.longitude, this.latitude]),\n        zoom: 18\n      })\n    });\n    this.addMarker(this.latitude, this.longitude);\n    console.log(this.latitude, this.longitude);\n  }\n\n  setCenter() {\n    var view = this.map.getView();\n    view.setCenter(ol.proj.fromLonLat([this.longitude, this.latitude]));\n    view.addMarker(ol.proj.fromLonLat([this.longitude, this.latitude]));\n    view.setZoom(12);\n  }\n\n  addMarker(lat: number, lng: number) {\n    var vectorLayer = new ol.layer.Vector({\n      source: new ol.source.Vector({\n        features: [new ol.Feature({\n          geometry: new ol.geom.Point(ol.proj.transform([lng, lat], 'EPSG:4326', 'EPSG:3857')),\n        })]\n      }),\n      style: new ol.style.Style({\n        image: new ol.style.Icon({\n          anchor: [0.5, 0.5],\n          anchorXUnits: \"fraction\",\n          anchorYUnits: \"fraction\",\n          src: \"../assets/marker(1).png\"\n        })\n      })\n    });\n    this.map.addLayer(vectorLayer);\n    }\n\n    goBack() {\n      this._location.back();\n    }\n}\n","<div id=\"map\" class=\"map\"></div>\n<div id=\"mouse-position\"></div>\n\n<button onclick=\"addMarker(40.4175132, -3.7070558)\">add marker at 8.54, 47.37</button>\n\n<div class=\"back\" (click)=\"goBack()\">\n    <div class=\"arrow\"></div>\n    <div class=\"text-back\">BACK</div>\n  </div>","import { Component, OnInit, Output, EventEmitter, Input} from '@angular/core';\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { Massage } from '../models/massage.model';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-massage-appointment',\n  templateUrl: './massage-appointment.component.html',\n  styleUrls: ['./massage-appointment.component.css']\n})\nexport class MassageAppointmentComponent implements OnInit {\n  @Input()\n  isAdmin = false;\n\n  @Input()\n  basicRoomIdNum: number;\n\n  @Input()\n  basicId: number;\n\n  todoForm: FormGroup;\n  successMessage = '';\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n  @Output() massageEmiter: EventEmitter<Massage> = new EventEmitter<Massage>();\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private http: HttpClient,\n    private cookieService: CookieService\n  ) { }\n\n  ngOnInit(): void {\n      this.todoForm = this.formBuilder.group({\n        massageType: ['', [Validators.required]]\n      });\n      this.todoForm.valueChanges.subscribe(console.log);\n  }\n\n  submitForm() {\n    if (this.basicId !== null && this.basicRoomIdNum !== null){\n      this.http\n      .post<Massage>('https://techhotel-edge.herokuapp.com/activities/massages',\n      {\n        \"userId\": this.basicId,\n        \"roomId\": this.basicRoomIdNum,\n        \"massageType\": this.todoForm.get('massageType').value\n      },\n       this.httpOptions)\n      .subscribe(massage => this.massageEmiter.emit(massage));\n\n      Object.keys(this.todoForm.controls).forEach(key => {\n      this.todoForm.get(key).setErrors(null) ;\n    });\n    }\n  }\n\n}\n","<div class=\"create-container\">\n    <form [formGroup]=\"todoForm\" (ngSubmit)=\"submitForm()\">\n      <div class=\"create-title\">MAKE MASSAGE APPOINTMENT</div>\n      <div class=\"create-fields\">\n        <div class=\"field\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Type Of Massage</mat-label>\n            <mat-select formControlName=\"massageType\" matNativeControl required>\n                <mat-option value=\"SWEDISH\">Swedish</mat-option>\n                <mat-option value=\"HOT_STONE\">Hot Stone</mat-option>\n                <mat-option value=\"AROMATHERAPY\">Aromatherapy</mat-option>\n                <mat-option value=\"THAI\">Thai</mat-option>\n                <mat-option value=\"COUPLES\">Couples</mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n        <div class=\"buttons\">\n          <div class=\"create\">\n            <button\n              type=\"submit\"\n              mat-raised-button\n              color=\"primary\"\n              class=\"create-raised\"\n              [disabled]=\"todoForm.invalid\">\n              <h4 class=\"create-button\">APPLY</h4>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>","import { Component, OnInit, Input } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Massage } from '../models/massage.model';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-massage-list',\n  templateUrl: './massage-list.component.html',\n  styleUrls: ['./massage-list.component.css']\n})\nexport class MassageListComponent implements OnInit {\n  @Input()\n  massageList: Massage[] = [];\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth')\n    }),\n  };\n\n  displayedColumns: string[] = [\n    'activityId',\n    'userId',\n    'roomId',\n    'totalPrice',\n    'massageType',\n    'beginOfActivity',\n    'duration',\n    'endOfActivity',\n  ];\n\n  constructor(\n    private cookieService: CookieService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<table\n  *ngIf=\"massageList.length >= 1\"\n  mat-table\n  [dataSource]=\"massageList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n  <ng-container matColumnDef=\"activityId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> MASSAGE ID.</th>\n    <td mat-cell *matCellDef=\"let massage\">{{ massage.activityId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"userId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID</th>\n    <td mat-cell *matCellDef=\"let massage\">{{ massage.userId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n    <td mat-cell *matCellDef=\"let massage\">{{ massage.roomId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"totalPrice\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>AMOUNT ($)</th>\n    <td mat-cell *matCellDef=\"let massage\">{{ massage.totalPrice[\"amount\"] }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"massageType\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>MASSAGE TYPE</th>\n    <td mat-cell *matCellDef=\"let massage\">{{ massage.massageType }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"beginOfActivity\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>BEGIN</th>\n    <td mat-cell *matCellDef=\"let massage\">{{ massage.beginOfActivity }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"duration\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>DURATION</th>\n    <td mat-cell *matCellDef=\"let massage\">{{ massage.duration }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"endOfActivity\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>END</th>\n    <td mat-cell *matCellDef=\"let massage\">{{ massage.endOfActivity }}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n\n<table\n  *ngIf=\"massageList.length == 0\"\n  mat-table\n  [dataSource]=\"massageList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n  <ng-container matColumnDef=\"activityId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> MASSAGE ID.</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"userId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"totalPrice\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>AMOUNT ($)</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"massageType\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>MASSAGE TYPE</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"beginOfActivity\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>STARTS</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"duration\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>DURATION</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"endOfActivity\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ENDS</th>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Massage } from '../models/massage.model';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { SharedService } from '../models/shared.service';\n\n@Component({\n  selector: 'app-massages-view',\n  templateUrl: './massages-view.component.html',\n  styleUrls: ['./massages-view.component.css']\n})\nexport class MassagesViewComponent implements OnInit {\n  isAdmin = false;\n  todoForm: FormGroup;\n  massageList: Massage[] = [];\n  username: string;\n  basicId: number;\n  basicRoomId: number;\n  basicRoomIdNum: number;\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n  constructor(\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private cookieService: CookieService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private sharedService: SharedService\n  ) { }\n\n  ngOnInit(): void {\n    this.http\n      .get<boolean>(\n        'https://techhotel-edge.herokuapp.com/users/login',\n        this.httpOptions\n      )\n      .subscribe((resp) => {\n        if (!resp) {\n          this.router.navigate(['/login'], { relativeTo: this.route });\n        }\n      });\n\n    this.http.get<boolean>('https://techhotel-edge.herokuapp.com/users/is-admin',\n    this.httpOptions).subscribe((bool) => (this.isAdmin = bool));\n\n    this.http\n        .get<Massage[]>(\n          'https://techhotel-edge.herokuapp.com/activities/massages',\n          this.httpOptions\n        )\n        .subscribe((massage) => {\n          this.massageList = massage; console.log(massage);\n        });\n\n    if (!this.isAdmin){\n      this.http\n        .get<any>(\n          'https://techhotel-edge.herokuapp.com/users/basics-username/' + this.cookieService.get('username'),\n          this.httpOptions\n        )\n        .subscribe((id) => {\n          this.basicId = id; console.log(this.basicId); console.log(\"number\"),\n          this.http.get<any[]>(\n            'https://techhotel-edge.herokuapp.com/activities/massages/filter/' + this.basicId,\n            this.httpOptions\n          )\n          .subscribe((massage) => {\n            this.massageList = massage; console.log(massage);\n          });\n\n          this.http.get<any>(\n            'https://techhotel-edge.herokuapp.com/users/basics/' + this.basicId, this.httpOptions\n          ).subscribe((roomId) => { this.basicRoomId = roomId; this.basicRoomIdNum = parseInt(JSON.stringify(this.basicRoomId[\"roomId\"]));\n          console.log(\"This Basic Id \" + this.basicId)});\n        });\n    }\n\n  }\n\n  submitForm() {\n    this.http\n      .post<Massage>(\n        'https://techhotel-edge.herokuapp.com/activities/massages',\n        this.todoForm.value,\n        this.httpOptions\n      )\n      .subscribe((massage) => {\n        this.massageList = [...this.massageList, massage];\n      });\n    this.todoForm.reset();\n  }\n\n\n  updateList(){\n    this.http.get<Massage[]>('https://techhotel-edge.herokuapp.com/activities/massages', this.httpOptions).subscribe(massage => {\n      this.massageList = [...massage];\n    }, () => console.log(\"updateList\"));\n  }\n\n}\n","<app-navbar></app-navbar>\n<div class=\"Massages content\">\n  <div class=\"center\">\n    <h1 class=\"center-h1\">Massages</h1>\n  </div>\n\n  <div class=\"description\">\n    <mat-card\n      style=\"\n        margin: 0 -10rem;\n        text-align: center;\n        padding-top: 30px;\n        padding-bottom: 30px;\n        font-size: 20px;\n        font-family: description;\n      \"\n    >\n     Here you can find all information about massages and make a new <b>massage appointment</b>.\n    </mat-card>\n  </div>\n\n   <div class=\"create-massage\">\n    <app-massage-appointment *ngIf=\"!isAdmin\" (massageEmiter)=\"updateList()\" [isAdmin]=\"isAdmin\" [basicRoomIdNum]=\"basicRoomIdNum\" [basicId]=\"basicId\"></app-massage-appointment>\n  </div>\n\n  \n  <div class=\"child-table\">\n  <app-massage-list [massageList]=\"massageList\"></app-massage-list>\n  </div>\n</div>","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n providedIn: 'root'\n})\nexport class SharedService {\n\n private approvalStageMessage = new BehaviorSubject('Basic Approval is required!');\n currentApprovalStageMessage = this.approvalStageMessage.asObservable();\n\n constructor() {\n\n }\n\n updateApprovalMessage(message: string) {\n this.approvalStageMessage.next(message);\n }\n}","import { Component, OnInit } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.css']\n})\nexport class NavbarComponent implements OnInit {\n  isAdmin = false;\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n  constructor(\n    private cookieService: CookieService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private http: HttpClient\n  ) { }\n\n  ngOnInit(): void {\n    this.http.get<boolean>('https://techhotel-edge.herokuapp.com/users/is-admin',\n    this.httpOptions).subscribe((bool) => (this.isAdmin = bool));\n  }\n\n  ngAfterViewInit(): void {\n    const content = document.getElementsByClassName('content');\n    let navbar = document.getElementsByClassName('Navbar')[0] as HTMLElement;\n    let navWidth = navbar.offsetWidth + 'px';\n    \n    for (let i = 0; i < content.length; i++) {\n      const e = content[i] as HTMLElement;\n      e.style.marginLeft = navWidth;\n    }\n\n    window.addEventListener('resize', () => {\n      navbar = document.getElementsByClassName('Navbar')[0] as HTMLElement;\n      navWidth = navbar.offsetWidth + 'px';\n      for (let i = 0; i < content.length; i++) {\n        const e = content[i] as HTMLElement;\n        e.style.marginLeft = navWidth;\n      }\n    });\n  }\n\n  logout = () => {\n    this.cookieService.delete('auth');\n    this.cookieService.delete('username');\n    this.router.navigate(['/login'], { relativeTo: this.route });\n  }\n\n}\n","<div class=\"Navbar\">\n    <img src=\"../../assets/loguito.png\" class=\"logo\" routerLink=\"/home\"/>\n    <hr>\n    <ul>\n      <li *ngIf=\"!isAdmin\" routerLink=\"/reservations\">Room Reservations</li>\n      <li routerLink=\"/massages\">Massages</li>\n      <li routerLink=\"/pool-rents\">Pool Rents</li>\n      <li routerLink=\"/room-foods\">Room Food Services</li>\n      <li *ngIf=\"!isAdmin\" routerLink=\"/profile\">Profile</li>\n      <li *ngIf=\"isAdmin\" routerLink=\"/invoices\">Invoices</li>\n      <li *ngIf=\"!isAdmin\" routerLink=\"/user-invoices\">Invoices</li>\n      <li *ngIf=\"isAdmin\" routerLink=\"/users\">Users</li>\n      <li *ngIf=\"isAdmin\" routerLink=\"/rooms\">Rooms</li>\n      <li routerLink=\"/location\">Hotel's Location</li>\n    </ul>\n    <button mat-button (click)=\"logout()\">Logout</button>\n</div>","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { PoolRent } from '../models/pool-rent.model';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-pool-rent-appointment',\n  templateUrl: './pool-rent-appointment.component.html',\n  styleUrls: ['./pool-rent-appointment.component.css']\n})\nexport class PoolRentAppointmentComponent implements OnInit {\n  isAdmin = false;\n\n  @Input()\n  basicRoomIdNum: number;\n\n  @Input()\n  basicId: number;\n\n  todoForm: FormGroup;\n  successMessage = '';\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n  @Output() poolRentEmiter: EventEmitter<PoolRent> = new EventEmitter<PoolRent>();\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private http: HttpClient,\n    private cookieService: CookieService\n  ) { }\n\n  ngOnInit(): void {\n      this.todoForm = this.formBuilder.group({\n        floatiesNum: ['', [Validators.required, Validators.min(1)]],\n        towelNum: ['', [Validators.required, Validators.min(1)]]\n      });\n      this.todoForm.valueChanges.subscribe(console.log);\n  }\n\n  submitForm() {\n      if (this.basicId !== null && this.basicRoomIdNum !== null){\n        this.http\n        .post<PoolRent>('https://techhotel-edge.herokuapp.com/activities/pool-rents',\n        {\n          \"userId\": this.basicId,\n          \"roomId\": this.basicRoomIdNum,\n          \"floatiesNum\": this.todoForm.get('floatiesNum').value,\n          \"towelNum\": this.todoForm.get('towelNum').value,\n        },\n         this.httpOptions)\n        .subscribe(massage => this.poolRentEmiter.emit(massage));\n        Object.keys(this.todoForm.controls).forEach(key => {\n        this.todoForm.get(key).setErrors(null) ;\n      });\n    }\n  }\n\n  get userId() {\n    return this.todoForm.get('userId');\n  }\n\n  get roomId() {\n    return this.todoForm.get('roomId');\n  }\n\n}\n","<div class=\"create-container\">\n    <form [formGroup]=\"todoForm\" (ngSubmit)=\"submitForm()\">\n      <div class=\"create-title\">NEW POOL RENT</div>\n      <div class=\"create-fields\">\n        <div class=\"field\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Floaties</mat-label>\n            <mat-select formControlName=\"floatiesNum\" matNativeControl required>\n                <mat-option value=\"1\">1</mat-option>\n                <mat-option value=\"2\">2</mat-option>\n                <mat-option value=\"3\">3</mat-option>\n                <mat-option value=\"4\">4</mat-option>\n                <mat-option value=\"5\">5</mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n        <div class=\"field\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Towels</mat-label>\n            <mat-select formControlName=\"towelNum\" matNativeControl required>\n                <mat-option value=\"1\">1</mat-option>\n                <mat-option value=\"2\">2</mat-option>\n                <mat-option value=\"3\">3</mat-option>\n                <mat-option value=\"4\">4</mat-option>\n                <mat-option value=\"5\">5</mat-option>\n            </mat-select>\n          </mat-form-field>\n\n        </div>\n        <div class=\"buttons\">\n          <div class=\"create\">\n            <button\n              type=\"submit\"\n              mat-raised-button\n              color=\"primary\"\n              class=\"create-raised\"\n              [disabled]=\"todoForm.invalid\">\n              <h4 class=\"create-button\">ENTER</h4>\n            </button>\n          </div>\n        </div>\n      </div>\n    </form>\n  </div>","import { Component, OnInit, Input } from '@angular/core';\nimport { PoolRent } from '../models/pool-rent.model';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-pool-rent-list',\n  templateUrl: './pool-rent-list.component.html',\n  styleUrls: ['./pool-rent-list.component.css']\n})\nexport class PoolRentListComponent implements OnInit {\n  @Input()\n  poolRentsList: PoolRent[] = [];\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth')\n    }),\n  };\n\n  displayedColumns: string[] = [\n    'activityId',\n    'userId',\n    'roomId',\n    'totalPrice',\n    'floatiesNum',\n    'towelNum',\n    'beginOfActivity',\n    'duration',\n    'endOfActivity',\n  ];\n\n  constructor(\n    private cookieService: CookieService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<table\n  *ngIf=\"poolRentsList.length >= 1\"\n  mat-table\n  [dataSource]=\"poolRentsList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n  <ng-container matColumnDef=\"activityId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> POOL RENT ID.</th>\n    <td mat-cell *matCellDef=\"let poolRent\">{{ poolRent.activityId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"userId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID</th>\n    <td mat-cell *matCellDef=\"let poolRent\">{{ poolRent.userId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n    <td mat-cell *matCellDef=\"let poolRent\">{{ poolRent.roomId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"totalPrice\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>AMOUNT ($)</th>\n    <td mat-cell *matCellDef=\"let poolRent\">{{ poolRent.totalPrice[\"amount\"] }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"floatiesNum\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>FLOATIES NUM</th>\n    <td mat-cell *matCellDef=\"let poolRent\">{{ poolRent.floatiesNum }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"towelNum\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>TOWEL NUM</th>\n    <td mat-cell *matCellDef=\"let poolRent\">{{ poolRent.towelNum }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"beginOfActivity\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>BEGIN</th>\n    <td mat-cell *matCellDef=\"let poolRent\">{{ poolRent.beginOfActivity }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"duration\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>DURATION</th>\n    <td mat-cell *matCellDef=\"let poolRent\">{{ poolRent.duration }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"endOfActivity\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>END</th>\n    <td mat-cell *matCellDef=\"let poolRent\">{{ poolRent.endOfActivity }}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n\n<table\n  *ngIf=\"poolRentsList.length == 0\"\n  mat-table\n  [dataSource]=\"poolRentsList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n<ng-container matColumnDef=\"activityId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> POOL RENT ID.</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"userId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"totalPrice\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>AMOUNT ($)</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"floatiesNum\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>FLOATIES NUM</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"towelNum\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>TOWEL NUM</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"beginOfActivity\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>BEGIN</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"duration\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>DURATION</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"endOfActivity\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>END</th>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { PoolRent } from '../models/pool-rent.model';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { SharedService } from '../models/shared.service';\n\n@Component({\n  selector: 'app-pool-rent-view',\n  templateUrl: './pool-rent-view.component.html',\n  styleUrls: ['./pool-rent-view.component.css']\n})\n\nexport class PoolRentViewComponent implements OnInit {\n  isAdmin = false;\n  todoForm: FormGroup;\n  poolRentsList: PoolRent[] = [];\n  basicId: number;\n  basicRoomId: number;\n  basicRoomIdNum: number;\n  username:string;\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n  constructor(\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private cookieService: CookieService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private sharedService: SharedService\n  ) { }\n\n  ngOnInit(): void {\n    this.http\n    .get<boolean>(\n      'https://techhotel-edge.herokuapp.com/users/login',\n      this.httpOptions\n    )\n    .subscribe((resp) => {\n      if (!resp) {\n        this.router.navigate(['/login'], { relativeTo: this.route });\n      }\n    });\n\n    this.username = this.cookieService.get('username');\n\n    this.http.get<boolean>('https://techhotel-edge.herokuapp.com/users/is-admin',\n    this.httpOptions).subscribe((bool) => (this.isAdmin = bool));\n\n    this.http\n        .get<PoolRent[]>(\n          'https://techhotel-edge.herokuapp.com/activities/pool-rents',\n          this.httpOptions\n        )\n        .subscribe((poolRent) => {\n          this.poolRentsList = poolRent; console.log(poolRent);\n        });\n    if (!this.isAdmin){\n  this.http\n        .get<any>(\n          'https://techhotel-edge.herokuapp.com/users/basics-username/' + this.username,\n          this.httpOptions\n        )\n        .subscribe((id) => {\n          this.basicId = id; console.log(this.basicId); console.log(\"number\"), console.log(this.username),\n          this.http.get<any[]>(\n            'https://techhotel-edge.herokuapp.com/activities/pool-rents/filter/' + this.basicId,\n            this.httpOptions\n          )\n          .subscribe((poolRent) => {\n            this.poolRentsList = poolRent; console.log(poolRent);\n          });\n\n          this.http.get<any>(\n            'https://techhotel-edge.herokuapp.com/users/basics/' + this.basicId, this.httpOptions\n          ).subscribe((roomId) => { this.basicRoomId = roomId; this.basicRoomIdNum = parseInt(JSON.stringify(this.basicRoomId[\"roomId\"]));\n                                    console.log(\"This Basic Id \" + this.basicId)});\n        });\n      } \n  }\n\n  submitForm() {\n    this.http\n      .post<PoolRent>(\n        'https://techhotel-edge.herokuapp.com/activities/pool-rents',\n        this.todoForm.value,\n        this.httpOptions\n      )\n      .subscribe((poolRent) => {\n        this.poolRentsList = [...this.poolRentsList, poolRent];\n      });\n  }\n\n\n  updateList(){\n    this.http.get<PoolRent[]>('https://techhotel-edge.herokuapp.com/activities/pool-rents', this.httpOptions).subscribe(poolRent => {\n      this.poolRentsList = [...poolRent];\n    }, () => console.log(\"updateList\"));\n  }\n\n}\n","<app-navbar></app-navbar>\n<div class=\"Pool Rents content\">\n  <div class=\"center\">\n    <h1 class=\"center-h1\">POOL RENTS</h1>\n  </div>\n\n  <div class=\"description\">\n    <mat-card\n      style=\"\n        margin: 0 -10rem;\n        text-align: center;\n        padding-top: 30px;\n        padding-bottom: 30px;\n        font-size: 20px;\n        font-family: description;\n      \">\n     Here you can find all information about pool rents and make you own rent of <b>Floaties</b> and <b>Towels</b>.\n    </mat-card>\n  </div>\n\n   <div class=\"create-pool-rent\">\n    <app-pool-rent-appointment *ngIf=\"!isAdmin\" (poolRentEmiter)=\"updateList()\" [basicRoomIdNum]=\"basicRoomIdNum\" [basicId]=\"basicId\"></app-pool-rent-appointment>\n  </div>\n\n  \n  <div class=\"child-table\">\n  <app-pool-rent-list [poolRentsList]=\"poolRentsList\"></app-pool-rent-list>\n  </div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie-service';\nimport { UserClient } from '../models/user-client.model';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-profile-list',\n  templateUrl: './profile-list.component.html',\n  styleUrls: ['./profile-list.component.css']\n})\nexport class ProfileListComponent implements OnInit {\n  isAdmin = false;\n  @Input()\n  profileList: any[] = [];\n\n  @Input()\n  basicUser: UserClient;\n\n  safeHtml: SafeHtml;\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth')\n    }),\n  };\n\n  constructor(\n    private http: HttpClient,\n    private cookieService: CookieService,\n    private sanitizer: DomSanitizer,\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    this.http\n    .get<boolean>(\n      'https://techhotel-edge.herokuapp.com/users/login',\n      this.httpOptions\n    )\n    .subscribe((resp) => {\n      if (!resp) {\n        this.router.navigate(['/login'], { relativeTo: this.route });\n      }\n    });\n\n    this.http.get<boolean>('https://techhotel-edge.herokuapp.com/users/is-admin',\n    this.httpOptions).subscribe((bool) => {\n      if (bool) {\n        this.router.navigate(['/home'], { relativeTo: this.route });\n      }\n    });\n    \n    this.safeHtml = this.sanitizer.bypassSecurityTrustHtml(\n      '<button>Click me</button>'\n    )\n  }\n\n}\n","\n <p>\n  <mat-toolbar color=\"primary\">\n    <mat-toolbar-row>\n      <span>ID.</span>\n      <span class=\"example-spacer\">{{basicUser.id.toString()}} </span>\n    </mat-toolbar-row>\n\n    <mat-toolbar-row>\n      <span>NAME</span>\n      <span class=\"example-spacer\"> {{basicUser.name.toString()}} </span>\n    </mat-toolbar-row>\n\n    <mat-toolbar-row>\n      <span>USERNAME</span>\n      <span class=\"example-spacer\"> {{basicUser.username.toString()}}  </span>\n    </mat-toolbar-row>\n\n    <mat-toolbar-row>\n      <span>TYPE OF USER</span>\n      <span class=\"example-spacer\"> {{basicUser.typeOfUser.toString()}} </span>\n    </mat-toolbar-row>\n\n    <mat-toolbar-row>\n      <span>EMAIL</span>\n      <span class=\"example-spacer\"> {{basicUser.email.toString()}} </span>\n    </mat-toolbar-row>\n\n    <mat-toolbar-row>\n      <span>BIRTH DATE</span>\n      <span class=\"example-spacer\"> {{basicUser.birthDate.toString()}} </span>\n    </mat-toolbar-row>\n\n    <mat-toolbar-row>\n      <span>COUNTRY</span>\n      <span class=\"example-spacer\"> {{basicUser.address['country'].toString()}} </span>\n    </mat-toolbar-row>\n\n    <mat-toolbar-row>\n      <span>CITY</span>\n      <span class=\"example-spacer\"> {{basicUser.address['city'].toString()}} </span>\n    </mat-toolbar-row>\n\n    <mat-toolbar-row>\n      <span>STREET</span>\n      <span class=\"example-spacer\"> {{basicUser.address['street'].toString()}} </span>\n    </mat-toolbar-row>\n\n    <mat-toolbar-row>\n      <span>POSTAL CODE</span>\n      <span class=\"example-spacer\"> {{basicUser.address['postalCode'].toString()}} </span>\n    </mat-toolbar-row>\n\n    <mat-toolbar-row>\n      <span>REGISTRATION DATE</span>\n      <span class=\"example-spacer\">{{basicUser.registrationDate.toString()}} </span>\n    </mat-toolbar-row>\n\n    <mat-toolbar-row>\n      <span>NUMBER OF STAYS</span>\n      <span class=\"example-spacer\"> {{basicUser.numberOfStays.toString()}} </span>\n    </mat-toolbar-row>\n\n    <mat-toolbar-row>\n      <span>ROOM ID</span>\n      <span class=\"example-spacer\"> {{basicUser.roomId.toString()}} </span>\n    </mat-toolbar-row>\n  </mat-toolbar>\n</p>","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { SharedService } from '../models/shared.service';\nimport { UserClient } from '../models/user-client.model';\n\n@Component({\n  selector: 'app-profile-view',\n  templateUrl: './profile-view.component.html',\n  styleUrls: ['./profile-view.component.css']\n})\nexport class ProfileViewComponent implements OnInit {\n  basicId: number;\n  basicUser: UserClient;\n  username: string;\n\n  todoForm: FormGroup;\n  poolRentsList: any[] = [];\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n  constructor(\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private cookieService: CookieService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private sharedService: SharedService\n  ) { }\n\n\n  ngOnInit(): void {\n    this.http\n    .get<boolean>(\n      'https://techhotel-edge.herokuapp.com/users/login',\n      this.httpOptions\n    )\n    .subscribe((resp) => {\n      if (!resp) {\n        this.router.navigate(['/login'], { relativeTo: this.route });\n      }\n    });\n\n    this.username = this.cookieService.get('username');\n    console.log(\"hola\")\n    console.log(this.username);\n\n    this.http\n        .get<number>(\n          'https://techhotel-edge.herokuapp.com/users/basics-username/' + this.username,\n          this.httpOptions\n        )\n        .subscribe((user) => {\n          this.basicId = user; console.log(this.basicId);\n          this.http.get<UserClient>(\n            'https://techhotel-edge.herokuapp.com/users/basics/' + this.basicId,\n            this.httpOptions\n          )\n          .subscribe((newUser) => {\n            this.basicUser = newUser; console.log(newUser);\n          }); });\n        }\n\n\n}\n","<app-navbar></app-navbar>\n<div class=\"profile content\">\n  <div class=\"center\">\n    <h1 class=\"center-h1\">PROFILE {{ this.username }}</h1>\n  </div>\n\n  <div class=\"description\">\n    <mat-card\n      style=\"\n        margin: 0 -10rem;\n        text-align: center;\n        padding-top: 30px;\n        padding-bottom: 30px;\n        font-size: 20px;\n        font-family: description;\">\n    <p> Hi there! Thank you for joying our crew. Our team hopes you'll have an awesome and enjoyable stay.</p>\n         <hr>\n         <p>Don't forget to check our services.</p>\n    </mat-card>\n  </div>\n  \n  <app-profile-list [basicUser]=\"basicUser\"></app-profile-list>\n  \n</div>","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { UserClient } from '../models/user-client.model';\nimport { Location } from '@angular/common';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-registration-view-new',\n  templateUrl: './registration-view-new.component.html',\n  styleUrls: ['./registration-view-new.component.css']\n})\n\nexport class RegistrationViewNewComponent implements OnInit {\n  noPremium = true;\n  todoForm: FormGroup;\n  postObject;\n  successMessage = '';\n\n  constructor(\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private _location: Location,\n    ) { }\n\n  ngOnInit(): void {\n\n    this.todoForm = this.formBuilder.group({\n      name: ['', [Validators.required, Validators.pattern('^[a-zA-Z]+\\\\s[a-zA-Z]+$')]],\n      username: ['', [Validators.required, Validators.minLength(4), Validators.pattern('^[a-zA-Z]+')]],\n      password: ['', [Validators.required, Validators.minLength(4)]],\n      phoneNumber: ['', [Validators.required, Validators.pattern('^[0-9]{9}$')]],\n      email: ['', [Validators.required, Validators.pattern(/[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/gm)]],\n      birthDate: ['', [Validators.required, Validators.pattern(/^([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/)]],\n      country: ['', [Validators.required, Validators.minLength(2), Validators.pattern('^[A-z]+$')]],\n      city: ['', [Validators.required, Validators.minLength(2), Validators.pattern('^[A-z]+$')]],\n      street: ['', [Validators.required, Validators.minLength(5)]],\n      postalCode: ['', [Validators.required, Validators.minLength(2), Validators.pattern('^[0-9]+')]],\n      balance: ['', [Validators.required, Validators.minLength(1), Validators.pattern('^[0-9]+')]],\n      type: ['Basic', Validators.required]\n    });\n\n    this.todoForm.valueChanges.subscribe(console.log);\n  }\n\n  submitForm(){\n    const type: string = this.todoForm.get('type').value;\n    if (type === 'Basic'){\n      this.http.post<UserClient>('https://techhotel-edge.herokuapp.com/users/basics', this.todoForm.value)\n      .subscribe(user => this.successMessage = 'Basic User created');\n    } else if (type === 'Premium') {\n      this.http.post<UserClient>('https://techhotel-edge.herokuapp.com/users/premiums', this.todoForm.value)\n      .subscribe(user => this.successMessage = 'Premium User created');\n    }\n    this.todoForm.reset();\n    Object.keys(this.todoForm.controls).forEach(key => {\n      this.todoForm.get(key).setErrors(null);\n    });\n  }\n\n  goBack() {\n    this._location.back();\n  }\n\n  get name() {\n    return this.todoForm.get('name');\n  }\n\n  get username() {\n    return this.todoForm.get('username');\n  }\n\n  get password() {\n    return this.todoForm.get('password');\n  }\n\n  get phoneNumber() {\n    return this.todoForm.get('phoneNumber');\n  }\n\n  get email() {\n    return this.todoForm.get('email');\n  }\n\n  get birthDate() {\n    return this.todoForm.get('birthDate');\n  }\n\n  get country() {\n    return this.todoForm.get('country');\n  }\n\n  get city() {\n    return this.todoForm.get('city');\n  }\n\n  get street() {\n    return this.todoForm.get('street');\n  }\n\n  get postalCode() {\n    return this.todoForm.get('postalCode');\n  }\n\n  get balance() {\n    return this.todoForm.get('balance');\n  }\n\n  get type() {\n    return this.todoForm.get('type');\n  }\n}\n","<div class=\"registration\">\n    <div class=\"center\">\n        <h1 class=\"center-h1\">Registration</h1>\n    </div>\n\n<div class=\"parent\">\n<form [formGroup]=\"todoForm\" (ngSubmit)=\"submitForm()\" class=\"example-form\">\n    <mat-form-field class=\"newLine\" class=\"example-full-width\">\n        <mat-label>Name: </mat-label>\n        <input matInput placeholder=\"First and Last Name\" formControlName=\"name\">\n        <mat-error *ngIf=\"name.invalid\">\n            Please insert both first and last names\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class=\"newLine\">\n        <mat-label>Username: </mat-label>\n        <input matInput placeholder=\"Username\" formControlName=\"username\">\n        <mat-error *ngIf=\"username.invalid\">\n            Please insert a valid username\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class=\"newLine\">\n        <mat-label>Password: </mat-label>\n        <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\">\n        <mat-error *ngIf=\"password.invalid\">\n            Please insert a valid password\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class=\"newLine\">\n        <mat-label>PhoneNumber: </mat-label>\n        <input matInput placeholder=\"PhoneNumber\" formControlName=\"phoneNumber\">\n        <mat-error *ngIf=\"phoneNumber.invalid\">\n            Please insert a valid phone number\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class=\"newLine\">\n        <mat-label>Email: </mat-label>\n        <input matInput placeholder=\"Email\" formControlName=\"email\">\n        <mat-error *ngIf=\"email.invalid\">\n            Please insert a valid email\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class=\"newLine\">\n        <mat-label>Birth Date: </mat-label>\n        <input matInput placeholder=\"YYYY-MM-DD\" formControlName=\"birthDate\">\n        <mat-error *ngIf=\"birthDate.invalid\">\n            Please insert your birth date\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class=\"newLine\">\n        <mat-label>Country: </mat-label>\n        <input matInput placeholder=\"Country\" formControlName=\"country\">\n        <mat-error *ngIf=\"country.invalid\">\n            Please insert a valid country\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class=\"newLine\">\n        <mat-label>City: </mat-label>\n        <input matInput placeholder=\"City\" formControlName=\"city\">\n        <mat-error *ngIf=\"city.invalid\">\n            Please insert a valid city\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class=\"newLine\">\n        <mat-label>Street: </mat-label>\n        <input matInput placeholder=\"Street\" formControlName=\"street\">\n        <mat-error *ngIf=\"street.invalid\">\n            Please insert a valid street\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class=\"newLine\">\n        <mat-label>Postal Code: </mat-label>\n        <input matInput placeholder=\"Postal Code\" formControlName=\"postalCode\">\n        <mat-error *ngIf=\"postalCode.invalid\">\n            Please insert a valid postal code\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class=\"newLine\">\n        <mat-label>Balance: </mat-label>\n        <input matInput type=\"password\"  matInput placeholder=\"Balance\" formControlName=\"balance\">\n        <mat-error *ngIf=\"balance.invalid\">\n            Please insert a valid balance\n        </mat-error>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Type Of User</mat-label>\n        <mat-select formControlName=\"type\" matNativeControl required>\n            <mat-option value=\"Basic\">Basic</mat-option>\n            <mat-option  [disabled]=\"noPremium\" value=\"Premium\">Premium</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"type.invalid\">\n            Please choose a type of user\n        </mat-error>\n      </mat-form-field>\n\n      <div class=\"buttons\">\n        <div class=\"create\">\n          <button\n            type=\"submit\"\n            mat-raised-button\n            color=\"primary\"\n            class=\"create-raised\"\n            [disabled]=\"todoForm.invalid\">\n            <h4 class=\"create-button\">REGISTER</h4>\n          </button>\n        </div>\n      </div>\n\n        <div class=\"back\" (click)=\"goBack()\">\n            <div class=\"arrow\"></div>\n            <div class=\"text-back\">BACK</div>\n          </div>\n</form>\n\n</div>\n\n</div>","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { RoomReservation } from '../models/room-reservation.model';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { SharedService } from '../models/shared.service';\nimport { UserClient } from '../models/user-client.model';\n\n@Component({\n  selector: 'app-reservation-view-new',\n  templateUrl: './reservation-view-new.component.html',\n  styleUrls: ['./reservation-view-new.component.css']\n})\nexport class ReservationViewNewComponent implements OnInit {\n  \n  todoForm: FormGroup;\n  successMessage = '';\n  message: string;\n  basicId: number;\n  basicRoomId: number;\n  basicUser: UserClient;\n  roomIdPost: string;\n  isTypeRoom = false;\n  regularRoom = \"REGULAR_ROOM\";\n  suiteRoom = \"SUITE_ROOM\";\n  username: string;\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n  constructor(\n    private http: HttpClient,\n    private cookieService: CookieService,\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private route: ActivatedRoute,\n    private sharedService: SharedService\n  ) { }\n\n  ngOnInit(): void {\n    this.http\n    .get<boolean>(\n      'https://techhotel-edge.herokuapp.com/users/login',\n      this.httpOptions\n    )\n    .subscribe((resp) => {\n      if (!resp) {\n        this.router.navigate(['/login'], { relativeTo: this.route });\n      }\n    });\n\n    this.http.get<boolean>('https://techhotel-edge.herokuapp.com/users/is-admin',\n    this.httpOptions).subscribe((bool) => {\n      if (bool) {\n        this.router.navigate(['/home'], { relativeTo: this.route });\n      }\n    });\n\n    this.username = this.cookieService.get('username');\n    this.http\n    .get<any>(\n      'https://techhotel-edge.herokuapp.com/users/basics-username/' + this.username,\n      this.httpOptions\n    )\n    .subscribe((id) => {\n      this.basicId = id; console.log(this.basicId); console.log(\"number\"), console.log(this.username),\n      this.http.get<UserClient>(\n        'https://techhotel-edge.herokuapp.com/users/basics/' + this.basicId,\n        this.httpOptions\n      )\n      .subscribe((user) => {\n        this.basicUser = user; console.log(user);\n      });\n    });\n\n    this.todoForm = this.formBuilder.group({\n      roomId: ['', [Validators.required, Validators.minLength(1), Validators.pattern('^[0-9]+')]],\n      numberOfNights: ['', [Validators.required, Validators.minLength(1), Validators.pattern('^[0-9]+')]],\n      roomType: ['', Validators.required]\n    });\n\n    this.todoForm.valueChanges.subscribe(console.log);\n  }\n\n  submitForm(){\n    const newType: string = this.todoForm.get('roomType').value;\n\n    if (newType === 'REGULAR_ROOM'){\n      this.http.post<RoomReservation>('https://techhotel-edge.herokuapp.com/reservations/rooms',\n      {\n        \"userId\": this.basicId,\n        \"userName\": this.basicUser.name,\n        \"roomId\": parseInt(this.todoForm.get('roomId').value),\n        \"numberOfNights\": this.todoForm.get('numberOfNights').value,\n        \"roomType\": this.todoForm.get('roomType').value\n\n      }\n      , this.httpOptions)\n      .subscribe((reservation) => {this.successMessage = 'Regular Room Reservation created'; this.roomIdPost = this.todoForm.get('roomId').value });\n    }\n    \n    if (newType === 'SUITE_ROOM') {\n      this.http.post<RoomReservation>('https://techhotel-edge.herokuapp.com/reservations/rooms', \n      {\n        \"userId\": this.basicId,\n        \"userName\": this.basicUser.name,\n        \"roomId\": parseInt(this.todoForm.get('roomId').value),\n        \"numberOfNights\": this.todoForm.get('numberOfNights').value,\n        \"roomType\": this.todoForm.get('roomType').value\n\n      }\n      , this.httpOptions)\n      .subscribe(reservation => this.successMessage = 'Suite Room Reservation created');\n    }\n\n    this.todoForm.reset();\n    Object.keys(this.todoForm.controls).forEach(key => {\n      this.todoForm.get(key).setErrors(null);\n    });\n  }\n\n  get userId() {\n    return this.todoForm.get('userId');\n  }\n\n  get name() {\n    return this.todoForm.get('name');\n  }\n\n  get roomId() {\n    return this.todoForm.get('roomId');\n  }\n\n  get numberOfNights() {\n    return this.todoForm.get('numberOfNights');\n  }\n\n  get roomType() {\n    return this.todoForm.get('roomType');\n  }\n\n}\n","<app-navbar></app-navbar>\n\n<div class=\"Reservation content\">\n    <div class=\"center\">\n        <h1 class=\"center-h1\">Rooms Reservations</h1>\n    </div>\n\n    <div class=\"register_information\">\n        <mat-card style=\"\n        margin: 0 -10rem;\n        text-align: center;\n        padding-top: 30px;\n        padding-bottom: 30px;\n        font-size: 20px;\n        font-family: description;\">\n    Our hotel displays to all our customer a total of 15 regular rooms and 5 suites, make a reservation down below.\n    </mat-card>\n    </div>\n\n<div *ngIf=\"basicUser.roomId===null || basicUser.roomId===0\" class=\"parent\">\n<form [formGroup]=\"todoForm\" (ngSubmit)=\"submitForm()\" class=\"example-form\">\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Type Of Room</mat-label>\n        <mat-select formControlName=\"roomType\" matNativeControl required>\n            <mat-option value=\"REGULAR_ROOM\">Regular Room</mat-option>\n            <mat-option value=\"SUITE_ROOM\">Suite Room</mat-option>\n        </mat-select>\n      </mat-form-field>\n\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Room Number</mat-label>\n        <mat-select [disabled]=\"roomType.invalid\" formControlName=\"roomId\" matNativeControl required>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"1\">Room 1</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"2\">Room 2</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"3\">Room 3</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"4\">Room 4</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"5\">Room 5</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"6\">Room 6</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"7\">Room 7</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"8\">Room 8</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"9\">Room 9</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"10\">Room 10</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"11\">Room 11</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"12\">Room 12</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"13\">Room 13</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"14\">Room 14</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.regularRoom\" value=\"15\">Room 15</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.suiteRoom\" value=\"16\">Room 16</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.suiteRoom\" value=\"17\">Room 17</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.suiteRoom\" value=\"18\">Room 18</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.suiteRoom\" value=\"19\">Room 19</mat-option>\n            <mat-option *ngIf=\"this.todoForm.get('roomType').value===this.suiteRoom\" value=\"20\">Room 20</mat-option>\n        </mat-select>\n        <mat-error *ngIf=\"roomId.invalid\">\n            Please choose a room\n        </mat-error>\n      </mat-form-field>\n\n    <mat-form-field class=\"newLine\">\n        <mat-label>Number Of Nights: </mat-label>\n        <input matInput placeholder=\"Insert number of nights\" formControlName=\"numberOfNights\">\n        <mat-error *ngIf=\"numberOfNights.invalid\">\n            Please insert a valid number\n        </mat-error>\n    </mat-form-field>\n    \n    <div class=\"buttons\">\n        <div class=\"create\">\n          <button\n            type=\"submit\"\n            mat-raised-button\n            color=\"primary\"\n            class=\"create-raised\"\n            [disabled]=\"todoForm.invalid\">\n            <h4 class=\"create-button\">APPLY</h4>\n          </button>\n        </div>\n      </div>\n\n</form>\n\n</div>\n<div  *ngIf=\"basicUser.roomId!==null || basicUser.roomId!==0\" class=\"gif\">\n    <img src=\"../../assets/welcome2.gif\">\n</div>\n\n</div>","import { Component, OnInit, Output, EventEmitter, Input} from '@angular/core';\nimport { FormGroup, FormBuilder, Validators} from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpHeaders } from '@angular/common/http';\nimport { RoomFood } from '../models/room-food.model';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-room-food-appointment',\n  templateUrl: './room-food-appointment.component.html',\n  styleUrls: ['./room-food-appointment.component.css']\n})\nexport class RoomFoodAppointmentComponent implements OnInit {\n  isAdmin = false;\n\n  todoForm: FormGroup;\n  successMessage = '';\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n  @Output() roomFoodEmiter: EventEmitter<RoomFood> = new EventEmitter<RoomFood>();\n  @Input()\n  basicRoomIdNum: number;\n\n  @Input()\n  basicId: number;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private cookieService: CookieService,\n    private http: HttpClient,\n    private router: Router,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n      this.todoForm = this.formBuilder.group({\n        foodMenu: ['', [Validators.required]],\n        drinkMenu: ['', [Validators.required]]\n      });\n  }\n\n  submitForm() {\n      if (this.basicId !== null && this.basicRoomIdNum !== null){\n        this.http\n        .post<RoomFood>('https://techhotel-edge.herokuapp.com/activities/room-food-services',\n        {\n        'userId': this.basicId,\n        'roomId': this.basicRoomIdNum,\n        'foodMenu': this.todoForm.get('foodMenu').value,\n        'drinkMenu': this.todoForm.get('drinkMenu').value,\n        },\n        this.httpOptions)\n        .subscribe(roomFood => this.roomFoodEmiter.emit(roomFood));\n\n        Object.keys(this.todoForm.controls).forEach(key => {\n        this.todoForm.get(key).setErrors(null) ;\n        });\n        }\n  }\n\n  get userId() {\n    return this.todoForm.get('userId');\n  }\n\n  get roomId() {\n    return this.todoForm.get('roomId');\n  }\n\n}\n","<div class=\"create-container\">\n    <form [formGroup]=\"todoForm\" (ngSubmit)=\"submitForm()\">\n      <div class=\"create-title\">ROOM FOOD REQUEST</div>\n      <div class=\"create-fields\">\n        <div class=\"field\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Plate</mat-label>\n            <mat-select formControlName=\"foodMenu\" matNativeControl required>\n                <mat-option value=\"STEAK_GRILLED\">Steak Grilled</mat-option>\n                <mat-option value=\"FRESH_SALMON\">Fresh Salmon</mat-option>\n                <mat-option value=\"BEEF_STROGANOFF\">Beef Stroganoff</mat-option>\n                <mat-option value=\"PIZZA_MARGARITA\">Pizza Margarita</mat-option>\n                <mat-option value=\"HOMEMADE_VEGGIE_SOUP\">Homemade Veggie Soup</mat-option>\n                <mat-option value=\"VEGETARIAN_BURGER\">Vegetarian Burguer</mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n          <div class=\"field\">\n          <mat-form-field appearance=\"outline\">\n            <mat-label>Drink</mat-label>\n            <mat-select formControlName=\"drinkMenu\">\n                <mat-option value=\"BOTTLE_OF_WATER\">Water Bottle</mat-option>\n                <mat-option value=\"CAPPUCCINO\">Capuccino</mat-option>\n                <mat-option value=\"COFFEE\">Coffee</mat-option>\n                <mat-option value=\"TEA\">Tea</mat-option>\n                <mat-option value=\"BEER\">Beer</mat-option>\n                <mat-option value=\"COCKTAIL\">Cocktail</mat-option>\n                <mat-option value=\"GLASS_RED_WINE\">Glass of Red Wine</mat-option>\n                <mat-option value=\"GLASS_GREEN_WINE\">Glass of Green Wine</mat-option>\n            </mat-select>\n          </mat-form-field>\n          </div>\n        </div>\n        <div class=\"buttons\">\n          <div class=\"create\">\n            <button\n              type=\"submit\"\n              mat-raised-button\n              color=\"primary\"\n              class=\"create-raised\"\n              [disabled]=\"todoForm.invalid\">\n              <h4 class=\"create-button\">ENTER</h4>\n            </button>\n          </div>\n        </div>\n    </form>\n  </div>","import { Component, OnInit, Input } from '@angular/core';\nimport { RoomFood } from '../models/room-food.model';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-room-food-list',\n  templateUrl: './room-food-list.component.html',\n  styleUrls: ['./room-food-list.component.css']\n})\nexport class RoomFoodListComponent implements OnInit {\n  @Input()\n  roomFoodsList: RoomFood[] = [];\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth')\n    }),\n  };\n\n  displayedColumns: string[] = [\n    'activityId',\n    'userId',\n    'roomId',\n    'totalPrice',\n    'foodMenu',\n    'drinkMenu',\n    'delivered',\n  ];\n\n  constructor(\n    private cookieService: CookieService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<table\n  *ngIf=\"roomFoodsList.length >= 1\"\n  mat-table\n  [dataSource]=\"roomFoodsList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n  <ng-container matColumnDef=\"activityId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> ROOM SERVICE ID.</th>\n    <td mat-cell *matCellDef=\"let roomFood\">{{ roomFood.activityId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"userId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID</th>\n    <td mat-cell *matCellDef=\"let roomFood\">{{ roomFood.userId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n    <td mat-cell *matCellDef=\"let roomFood\">{{ roomFood.roomId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"totalPrice\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>AMOUNT ($)</th>\n    <td mat-cell *matCellDef=\"let roomFood\">{{ roomFood.totalPrice[\"amount\"] }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"foodMenu\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>FOOD MENU</th>\n    <td mat-cell *matCellDef=\"let roomFood\">{{ roomFood.foodMenu }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"drinkMenu\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>DRINK MENU</th>\n    <td mat-cell *matCellDef=\"let roomFood\">{{ roomFood.drinkMenu }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"delivered\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>DELIVERED</th>\n    <td mat-cell *matCellDef=\"let roomFood\">{{ roomFood.delivered }}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n\n<table\n  *ngIf=\"roomFoodsList.length == 0\"\n  mat-table\n  [dataSource]=\"roomFoodsList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>  \n<ng-container matColumnDef=\"activityId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> ROOM SERVICE ID.</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"userId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"totalPrice\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>AMOUNT ($)</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"foodMenu\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>FOOD MENU</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"drinkMenu\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>DRINK MENU</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"delivered\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>DELIVERED</th>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { RoomFood } from '../models/room-food.model';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { SharedService } from '../models/shared.service';\n\n@Component({\n  selector: 'app-room-food-view',\n  templateUrl: './room-food-view.component.html',\n  styleUrls: ['./room-food-view.component.css']\n})\nexport class RoomFoodViewComponent implements OnInit {\n  isAdmin = false;\n  todoForm: FormGroup;\n  roomFoodsList: RoomFood[] = [];\n  basicId: number;\n  basicRoomId: number;\n  basicRoomIdNum: number;\n  username: string;\n\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n  constructor(\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private cookieService: CookieService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private sharedService: SharedService\n  ) { }\n\n  ngOnInit(): void {\n\n    this.http\n      .get<boolean>(\n        'https://techhotel-edge.herokuapp.com/users/login',\n        this.httpOptions\n      )\n      .subscribe((resp) => {\n        if (!resp) {\n          this.router.navigate(['/login'], { relativeTo: this.route });\n        }\n      });\n\n    this.username = this.cookieService.get('username');\n\n    this.http.get<boolean>('https://techhotel-edge.herokuapp.com/users/is-admin',\n    this.httpOptions).subscribe((bool) => (this.isAdmin = bool));\n\n    this.http\n        .get<RoomFood[]>(\n          'https://techhotel-edge.herokuapp.com/activities/room-food-services',\n          this.httpOptions\n        )\n        .subscribe((roomFood) => {\n          this.roomFoodsList = roomFood; console.log(roomFood);\n        });\n    if(!this.isAdmin){\n      this.http\n        .get<any>(\n          'https://techhotel-edge.herokuapp.com/users/basics-username/' + this.username,\n          this.httpOptions\n        )\n        .subscribe((id) => {\n          this.basicId = id; console.log(this.basicId); console.log(\"number\"),\n          this.http.get<any[]>(\n            'https://techhotel-edge.herokuapp.com/activities/room-foods-service/filter/' + this.basicId,\n            this.httpOptions\n          )\n          .subscribe((roomFood) => {\n            this.roomFoodsList = roomFood; console.log(roomFood);\n          });\n\n          this.http.get<any>(\n            'https://techhotel-edge.herokuapp.com/users/basics/' + this.basicId, this.httpOptions\n          ).subscribe((roomId) => { this.basicRoomId = roomId; this.basicRoomIdNum = parseInt(JSON.stringify(this.basicRoomId[\"roomId\"]));\n          console.log(\"This Basic Id \" + this.basicId)});\n        });\n    }\n  }\n\n  submitForm() {\n    this.http\n      .post<RoomFood>(\n        'https://techhotel-edge.herokuapp.com/activities/room-food-services',\n        this.todoForm.value,\n        this.httpOptions\n      )\n      .subscribe((roomFood) => {\n        this.roomFoodsList = [...this.roomFoodsList, roomFood];\n      });\n    this.todoForm.reset();\n  }\n\n\n  updateList(){\n    this.http.get<RoomFood[]>('https://techhotel-edge.herokuapp.com/activities/room-food-services', this.httpOptions).subscribe(roomFood => {\n      this.roomFoodsList = [...roomFood];\n    }, () => console.log(\"updateList\"));\n  }\n\n}\n","<app-navbar></app-navbar>\n<div class=\"Room Foods content\">\n  <div class=\"center\">\n    <h1 class=\"center-h1\">ROOM FOOD SERVICES</h1>\n  </div>\n\n  <div class=\"description\">\n    <mat-card\n      style=\"\n        margin: 0 -10rem;\n        text-align: center;\n        padding-top: 30px;\n        padding-bottom: 30px;\n        font-size: 20px;\n        font-family: description;\n      \">\n    Ask for a room food service with our amazing foods all listed bellow.\n    </mat-card>\n  </div>\n\n   <div class=\"create-room-food\">\n    <app-room-food-appointment *ngIf=\"!isAdmin\" (roomFoodEmiter)=\"updateList()\" [basicRoomIdNum]=\"basicRoomIdNum\" [basicId]=\"basicId\"></app-room-food-appointment>\n  </div>\n\n  \n  <div class=\"child-table\">\n  <app-room-food-list [roomFoodsList]=\"roomFoodsList\"></app-room-food-list>\n  </div>\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { Room } from '../models/room.model';\n\n@Component({\n  selector: 'app-rooms-list',\n  templateUrl: './rooms-list.component.html',\n  styleUrls: ['./rooms-list.component.css']\n})\nexport class RoomsListComponent implements OnInit {\n\n  @Output() roomEmiter: EventEmitter<Room> = new EventEmitter<Room>();\n\n  @Input()\n  regularRoomList: Room[] = [];\n\n  @Input()\n  suiteRoomList: Room[] = [];\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth')\n    }),\n  };\n\n  displayedColumns: string[] = [\n    'roomId',\n    'numberOfBeds',\n    'hairDryer',\n    'bathTub',\n    'price',\n    'roomType',\n    'available',\n  ];\n\n  constructor(\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private cookieService: CookieService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"create-title\">REGULAR ROOMS</div>\n<table\n  *ngIf=\"regularRoomList.length >= 1\"\n  mat-table\n  [dataSource]=\"regularRoomList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n    <td mat-cell *matCellDef=\"let regularRoom\">{{ regularRoom.roomId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"numberOfBeds\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>NUM OF BEDS</th>\n    <td mat-cell *matCellDef=\"let regularRoom\">{{ regularRoom.numberOfBeds }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"hairDryer\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>HAIR DRYER</th>\n    <td mat-cell *matCellDef=\"let regularRoom\">{{ regularRoom.hairDryer }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"bathTub\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>BATH TUB</th>\n    <td mat-cell *matCellDef=\"let regularRoom\">{{ regularRoom.bathTub }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"price\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>PRICE ($)</th>\n    <td mat-cell *matCellDef=\"let regularRoom\">{{ regularRoom.price }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"roomType\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM TYPE</th>\n    <td mat-cell *matCellDef=\"let regularRoom\">{{ regularRoom.roomType }}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"available\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>AVAILABLE</th>\n    <td mat-cell *matCellDef=\"let regularRoom\">{{ regularRoom.available }}</td>\n  </ng-container>\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n\n<div class=\"create-title\">SUITE ROOMS</div>\n<table\n  *ngIf=\"suiteRoomList.length >= 1\"\n  mat-table\n  [dataSource]=\"suiteRoomList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n<ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n    <td mat-cell *matCellDef=\"let suiteRoom\">{{ suiteRoom.roomId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"numberOfBeds\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>NUM OF BEDS</th>\n    <td mat-cell *matCellDef=\"let suiteRoom\">{{ suiteRoom.numberOfBeds }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"hairDryer\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>HAIR DRYER</th>\n    <td mat-cell *matCellDef=\"let suiteRoom\">{{ suiteRoom.hairDryer }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"bathTub\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>BATH TUB</th>\n    <td mat-cell *matCellDef=\"let suiteRoom\">{{ suiteRoom.bathTub }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"price\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>PRICE ($)</th>\n    <td mat-cell *matCellDef=\"let suiteRoom\">{{ suiteRoom.price }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"roomType\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM TYPE</th>\n    <td mat-cell *matCellDef=\"let suiteRoom\">{{ suiteRoom.roomType }}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"available\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>AVAILABLE</th>\n    <td mat-cell *matCellDef=\"let suiteRoom\">{{ suiteRoom.available }}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { SharedService } from '../models/shared.service';\nimport { Room } from '../models/room.model';\n\n@Component({\n  selector: 'app-rooms-view',\n  templateUrl: './rooms-view.component.html',\n  styleUrls: ['./rooms-view.component.css']\n})\nexport class RoomsViewComponent implements OnInit {\n\n  regularRoomList: Room[] = [];\n  suiteRoomList: Room[] = [];\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n  constructor(\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private cookieService: CookieService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) { }\n\n  ngOnInit(): void {\n    this.http\n    .get<boolean>(\n      'https://techhotel-edge.herokuapp.com/users/login',\n      this.httpOptions\n    )\n    .subscribe((resp) => {\n      if (!resp) {\n        this.router.navigate(['/login'], { relativeTo: this.route });\n      }\n    });\n\n    this.http.get<boolean>('https://techhotel-edge.herokuapp.com/users/is-admin',\n    this.httpOptions).subscribe((bool) => {\n      if (!bool) {\n        this.router.navigate(['/home'], { relativeTo: this.route });\n      }\n    });\n\n    this.http\n    .get<Room[]>(\n      'https://techhotel-edge.herokuapp.com/regular-rooms',\n      this.httpOptions\n    )\n    .subscribe((regularRoom) => {\n      this.regularRoomList = regularRoom; console.log(regularRoom);\n\n      this.http\n    .get<Room[]>(\n      'https://techhotel-edge.herokuapp.com/suites',\n      this.httpOptions\n    )\n    .subscribe((suiteRoom) => {\n      this.suiteRoomList = suiteRoom; console.log(suiteRoom);\n    });\n    });\n  }\n\n}\n","<app-navbar></app-navbar>\n<div class=\"Room Foods content\">\n  <div class=\"center\">\n    <h1 class=\"center-h1\">HOTEL ROOMS</h1>\n  </div>\n\n  <div class=\"description\">\n    <mat-card\n      style=\"\n        margin: 0 -10rem;\n        text-align: center;\n        padding-top: 30px;\n        padding-bottom: 30px;\n        font-size: 20px;\n        font-family: description;\n      \">\n    Only available for Admins: See all hotel rooms and its details\n    </mat-card>\n  </div>\n\n  <div class=\"child-table\">\n    <app-rooms-list [regularRoomList]=\"regularRoomList\" [suiteRoomList]=\"suiteRoomList\"></app-rooms-list>\n</div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Invoice } from '../models/invoice.model';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-users-invoices-list',\n  templateUrl: './users-invoices-list.component.html',\n  styleUrls: ['./users-invoices-list.component.css']\n})\nexport class UsersInvoicesListComponent implements OnInit {\n  @Input()\n  invoiceList: Invoice[] = [];\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth')\n    }),\n  };\n\n  displayedColumns: string[] = [\n    'invoiceId',\n    'userId',\n    'name',\n    'roomId',\n    'invoiceType',\n    'priceOwed',\n  ];\n  constructor(\n    private cookieService: CookieService\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<table\n  *ngIf=\"invoiceList.length >= 1\"\n  mat-table\n  [dataSource]=\"invoiceList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n  <ng-container matColumnDef=\"invoiceId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> INVOICE ID.</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.invoiceId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"userId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.userId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER NAME</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.name }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.roomId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"invoiceType\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>INVOICE TYPE</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.invoiceType }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"priceOwed\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>AMOUNT PAYED ($)</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.priceOwed }}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n\n<table\n  *ngIf=\"invoiceList.length == 0\"\n  mat-table\n  [dataSource]=\"invoiceList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n<ng-container matColumnDef=\"invoiceId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header> INVOICE ID.</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.invoiceId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"userId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.userId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER NAME</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.name }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.roomId }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"invoiceType\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>INVOICE TYPE</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.invoiceType }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"priceOwed\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>AMOUNT PAYED ($)</th>\n    <td mat-cell *matCellDef=\"let invoice\">{{ invoice.priceOwed }}</td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Invoice } from '../models/invoice.model';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { User } from '../models/user.model';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-users-invoices-view',\n  templateUrl: './users-invoices-view.component.html',\n  styleUrls: ['./users-invoices-view.component.css']\n})\nexport class UsersInvoicesViewComponent implements OnInit {\n  users: User[] = [];\n  isAdmin=false;\n\n  todoForm: FormGroup;\n  invoiceList: Invoice[] = [];\n  username: string;\n  basicId: number;\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n  constructor(\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private cookieService: CookieService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    this.http\n    .get<boolean>(\n      'https://techhotel-edge.herokuapp.com/users/login',\n      this.httpOptions\n    )\n    .subscribe((resp) => {\n      if (!resp) {\n        this.router.navigate(['/login'], { relativeTo: this.route });\n      }\n    });\n\n    this.username = this.cookieService.get('username');\n\n    this.http.get<boolean>('https://techhotel-edge.herokuapp.com/users/is-admin',\n    this.httpOptions).subscribe((bool) => {\n      if (bool) {\n        this.router.navigate(['/home'], { relativeTo: this.route });\n      }\n    });\n    if(!this.isAdmin){\n      this.http\n        .get<any>(\n          'https://techhotel-edge.herokuapp.com/users/basics-username/' + this.username,\n          this.httpOptions\n        )\n        .subscribe((id) => {\n          this.basicId = id; console.log(this.basicId); console.log(\"number\"),\n          this.http.get<any[]>(\n            'https://techhotel-edge.herokuapp.com/invoices/' + this.basicId,\n            this.httpOptions\n          )\n          .subscribe((invoiceByUser) => {\n            this.invoiceList = invoiceByUser; console.log(invoiceByUser);\n          });\n        });\n    }\n    \n  }\n\n}\n","<app-navbar></app-navbar>\n<div class=\"user-invoices content\">\n  <div class=\"center\">\n    <h1 class=\"center-h1\">Invoices</h1>\n  </div>\n\n  <div class=\"description\">\n    <mat-card\n      style=\"\n        margin: 0 -10rem;\n        text-align: center;\n        padding-top: 30px;\n        padding-bottom: 30px;\n        font-size: 20px;\n        font-family: description;\">\n    All your <b>invoices</b> in Tech Hotel are displayed down bellow.\n    </mat-card>\n  </div>\n  \n  <div class=\"child-table\">\n  <app-invoice-list [invoiceList]=\"invoiceList\"></app-invoice-list>\n  </div>\n</div>","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { UserClient } from '../models/user-client.model';\n\n@Component({\n  selector: 'app-users-list',\n  templateUrl: './users-list.component.html',\n  styleUrls: ['./users-list.component.css']\n})\nexport class UsersListComponent implements OnInit {\n\n  @Output() userEmiter: EventEmitter<UserClient> = new EventEmitter<UserClient>();\n\n  @Input()\n  basicUserList: UserClient[] = [];\n\n  @Input()\n  premiumUserList: UserClient[] = [];\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth')\n    }),\n  };\n\n  displayedColumns: string[] = [\n    'id',\n    'name',\n    'username',\n    'typeOfUser',\n    'country',\n    'city',\n    'registrationDate',\n    'roomId',\n    'delete',\n  ];\n\n\n  constructor(\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private cookieService: CookieService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) { }\n\n  ngOnInit(): void {\n  }\n\n  deleteBasic(id){\n    this.http.delete<UserClient>('https://techhotel-edge.herokuapp.com/users/basics/' + id, this.httpOptions)\n    .subscribe((basicUser) => {this.basicUserList = [...this.basicUserList, basicUser]; });\n  }\n\n  deletePremium(id){\n    this.http.delete<UserClient>('https://techhotel-edge.herokuapp.com/users/premiums/' + id, this.httpOptions)\n    .subscribe((premiumUser) => {this.premiumUserList = [...this.premiumUserList, premiumUser]; });\n  }\n\n}\n","<div class=\"create-title\">BASIC USERS</div>\n<table\n  *ngIf=\"basicUserList.length >= 1\"\n  mat-table\n  [dataSource]=\"basicUserList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n  <ng-container matColumnDef=\"id\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID.</th>\n    <td mat-cell *matCellDef=\"let basicUser\">{{ basicUser.id }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>NAME</th>\n    <td mat-cell *matCellDef=\"let basicUser\">{{ basicUser.name }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"username\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USERNAME</th>\n    <td mat-cell *matCellDef=\"let basicUser\">{{ basicUser.username }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"typeOfUser\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>TYPE OF USER</th>\n    <td mat-cell *matCellDef=\"let basicUser\">{{ basicUser.typeOfUser }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"country\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>COUNTRY</th>\n    <td mat-cell *matCellDef=\"let basicUser\">{{ basicUser.address['country'] }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"city\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>CITY</th>\n    <td mat-cell *matCellDef=\"let basicUser\">{{ basicUser.address['city'] }}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"registrationDate\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>REGISTRATION DATE</th>\n    <td mat-cell *matCellDef=\"let basicUser\">{{ basicUser.registrationDate }}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n    <td mat-cell *matCellDef=\"let basicUser\">{{ basicUser.roomId }}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"delete\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>BLOCK USER</th>\n    <td mat-cell *matCellDef=\"let basicUser\"><button\n      (click)=\"deleteBasic(basicUser.id)\"\n      mat-raised-button\n      color=\"primary\"\n      class=\"create-raised\">Block</button></td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n\n<table\n  *ngIf=\"basicUserList.length == 0\"\n  mat-table\n  [dataSource]=\"basicUserList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>  \n<ng-container matColumnDef=\"id\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID.</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>NAME</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"username\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USERNAME</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"typeOfUser\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>TYPE OF USER</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"country\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>COUNTRY</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"city\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>CITY</th>\n  </ng-container>\n  <ng-container matColumnDef=\"registrationDate\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>REGISTRATION DATE</th>\n  </ng-container>\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n  </ng-container>\n  <ng-container matColumnDef=\"delete\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>BLOCK USER</th>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n\n\n<div class=\"create-title\">PREMIUM USERS</div>\n<table\n  *ngIf=\"premiumUserList.length >= 1\"\n  mat-table\n  [dataSource]=\"premiumUserList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n  <ng-container matColumnDef=\"id\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID.</th>\n    <td mat-cell *matCellDef=\"let premiumUser\">{{ premiumUser.id }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>NAME</th>\n    <td mat-cell *matCellDef=\"let premiumUser\">{{ premiumUser.name }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"username\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USERNAME</th>\n    <td mat-cell *matCellDef=\"let premiumUser\">{{ premiumUser.username }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"typeOfUser\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>TYPE OF USER</th>\n    <td mat-cell *matCellDef=\"let premiumUser\">{{ premiumUser.typeOfUser }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"country\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>COUNTRY</th>\n    <td mat-cell *matCellDef=\"let premiumUser\">{{ premiumUser.address['country'] }}</td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"city\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>CITY</th>\n    <td mat-cell *matCellDef=\"let premiumUser\">{{ premiumUser.address['city'] }}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"registrationDate\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>REGISTRATION DATE</th>\n    <td mat-cell *matCellDef=\"let premiumUser\">{{ premiumUser.registrationDate }}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n    <td mat-cell *matCellDef=\"let premiumUser\">{{ premiumUser.roomId }}</td>\n  </ng-container>\n  <ng-container matColumnDef=\"delete\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>BLOCK USER</th>\n    <td mat-cell *matCellDef=\"let premiumUser\"><button\n      (click)=\"deletePremium(premiumUser.id)\"\n      mat-raised-button\n      color=\"primary\"\n      class=\"create-raised\">Block</button>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>\n\n<table\n  *ngIf=\"premiumUserList.length == 0\"\n  mat-table\n  [dataSource]=\"premiumUserList\"\n  matSort\n  class=\"mat-elevation-z8\"\n>\n<ng-container matColumnDef=\"id\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USER ID.</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"name\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>NAME</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"username\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>USERNAME</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"typeOfUser\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>TYPE OF USER</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"country\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>COUNTRY</th>\n  </ng-container>\n\n  <ng-container matColumnDef=\"city\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>CITY</th>\n  </ng-container>\n  <ng-container matColumnDef=\"registrationDate\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>REGISTRATION DATE</th>\n  </ng-container>\n  <ng-container matColumnDef=\"roomId\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>ROOM ID.</th>\n  </ng-container>\n  <ng-container matColumnDef=\"delete\">\n    <th mat-header-cell *matHeaderCellDef mat-sort-header>BLOCK USER</th>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns\"></tr>\n</table>","import { Component, OnInit } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { CookieService } from 'ngx-cookie-service';\nimport { SharedService } from '../models/shared.service';\nimport { UserClient } from '../models/user-client.model';\n\n\n@Component({\n  selector: 'app-users-view',\n  templateUrl: './users-view.component.html',\n  styleUrls: ['./users-view.component.css']\n})\nexport class UsersViewComponent implements OnInit {\n\n  basicUserList: UserClient[] = [];\n  premiumUserList: UserClient[] = [];\n\n\n  httpOptions = {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: this.cookieService.get('auth'),\n    }),\n  };\n\n\n  constructor(\n    private http: HttpClient,\n    private formBuilder: FormBuilder,\n    private cookieService: CookieService,\n    private router: Router,\n    private route: ActivatedRoute,\n  ) { }\n\n  ngOnInit(): void {\n    this.http\n    .get<boolean>(\n      'https://techhotel-edge.herokuapp.com/users/login',\n      this.httpOptions\n    )\n    .subscribe((resp) => {\n      if (!resp) {\n        this.router.navigate(['/login'], { relativeTo: this.route });\n      }\n    });\n\n    this.http.get<boolean>('https://techhotel-edge.herokuapp.com/users/is-admin',\n    this.httpOptions).subscribe((bool) => {\n      if (!bool) {\n        this.router.navigate(['/home'], { relativeTo: this.route });\n      }\n    });\n\n    this.http\n    .get<UserClient[]>(\n      'https://techhotel-edge.herokuapp.com/users/basics',\n      this.httpOptions\n    )\n    .subscribe((basicUser) => {\n      this.basicUserList = basicUser; console.log(basicUser);\n\n      this.http\n    .get<UserClient[]>(\n      'https://techhotel-edge.herokuapp.com/users/premiums',\n      this.httpOptions\n    )\n    .subscribe((premiumUser) => {\n      this.premiumUserList = premiumUser; console.log(premiumUser);\n    });\n    });\n  }\n\n  updateList(){\n    this.http.get<UserClient[]>('https://techhotel-edge.herokuapp.com/users/basics', this.httpOptions).subscribe(basicUser => {\n      this.basicUserList = [...basicUser];\n    }, () => console.log(\"updateList\"));\n\n    this.http.get<UserClient[]>('https://techhotel-edge.herokuapp.com/users/premiums', this.httpOptions).subscribe(premiumUser => {\n      this.premiumUserList = [...premiumUser];\n    }, () => console.log(\"updateList\"));\n  }\n\n}\n","<app-navbar></app-navbar>\n<div class=\"Room Foods content\">\n  <div class=\"center\">\n    <h1 class=\"center-h1\">SUBSCRIBED USERS</h1>\n  </div>\n\n  <div class=\"description\">\n    <mat-card\n      style=\"\n        margin: 0 -10rem;\n        text-align: center;\n        padding-top: 30px;\n        padding-bottom: 30px;\n        font-size: 20px;\n        font-family: description;\n      \">\n    Only available for Admins: See all subscribed users personal information\n    </mat-card>\n  </div>\n\n  <div class=\"child-table\">\n    <app-users-list (userEmiter)=\"updateList()\" [basicUserList]=\"basicUserList\" [premiumUserList]=\"premiumUserList\"></app-users-list>\n</div>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}